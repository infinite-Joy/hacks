set nocompatible              " required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" set pathogen
call pathogen#infect()
call pathogen#helptags()

" don't use arrowkeys
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" set default encoding
set encoding=utf-8

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" for javascript
Plugin 'pangloss/vim-javascript'

let g:pymode_python = 'python3'

let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_ngdoc = 1
let g:javascript_plugin_flow = 1
set foldmethod=syntax

set splitbelow
set splitright

"split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Enable folding
set foldmethod=indent
set foldlevel=99

" Enable folding with the spacebar
nnoremap <space> za

Plugin 'tmhedberg/SimpylFold'

let g:SimpylFold_docstring_preview=1

au BufNewFile,BufRead *.py,*.rs
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix

au BufNewFile,BufRead *.js,*.html,*.css
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2 |

" use ghc functionality for haskell files
"
au BufNewFile,BufRead,Bufenter *.hs compiler ghc

Plugin 'vim-scripts/indentpython.vim'

highlight BadWhitespace ctermbg=red guibg=darkred

au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

set encoding=utf-8

" tab completion and snippets
Bundle 'ervandew/supertab'
Bundle 'Valloric/YouCompleteMe'
Bundle 'SirVer/ultisnips'

" Python syntax  highlighting
Plugin 'syntax/python.vim'
let python_highlight_all = 1

" Snippets are separated from the engine. Add this if you want them:
Plugin 'honza/vim-snippets'

" mypy support
Plugin 'integralist/vim-mypy'

" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

let g:ycm_autoclose_preview_window_after_completion=1
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>

Plugin 'scrooloose/syntastic'

Plugin 'nvie/vim-flake8'

let python_highlight_all=1
syntax on

Plugin 'jnurmine/Zenburn'
Plugin 'altercation/vim-colors-solarized'

if has('gui_running')
  set background=dark
  colorscheme solarized
else
  colorscheme zenburn
endif
":colors zenburn

if $ITERM_PROFILE == 'demo'
  colorscheme koehler
endif

call togglebg#map("<F5>")

Plugin 'scrooloose/nerdtree'

Plugin 'jistr/vim-nerdtree-tabs'

let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree

" file searching in the project
Plugin 'kien/ctrlp.vim'
"
" Ignore some folders and files for CtrlP indexing
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\.git$\|\.yardoc\|public$|log\|tmp\|venv$',
  \ 'file': '\.so$\|\.dat$|\.DS_Store$'
  \ }

set nu
set statusline+=%F

Plugin 'tpope/vim-fugitive'

Plugin 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}

" surround your words with specific delimiters
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'

" python refactoring
" cd ~/.vim/bundle
" git clone https://github.com/python-rope/ropevim.git
let ropevim_vim_completion=1

" rust development
Plugin 'rust-lang/rust.vim'
Plugin 'racer-rust/vim-racer'

" plugin search project directory
" Do brew install the_silver_searcher first
Plugin 'rking/ag.vim'

" for grammer correction
Plugin 'rhysd/vim-grammarous'

" Add all your plugins here (note older versions of Vundle used Bundle instead of Plugin)

" All of your Plugins must be added before the following line
call vundle#end()            " required

" enable filetype detection, plus loading of filetype plugins
filetype plugin on

filetype plugin indent on    " required
